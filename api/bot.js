const TelegramBot = require('node-telegram-bot-api');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  console.error('ERROR: BOT_TOKEN environment variable is not set!');
}

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {
  polling: false,
  requestOptions: {
    timeout: 10000,
    agentOptions: {
      keepAlive: true,
      family: 4
    }
  }
});

// –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DISCUSSION_GROUP_ID = process.env.DISCUSSION_GROUP_ID;

// ID –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const KNOWN_USERS = {
  SPECTR: 1465194766,    // –°–ø–µ–∫—Ç—Ä
  ADVISOR: 2032240231     // –°–æ–≤–µ—Ç—á–∏–∫
};

// –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
const rulesText = `‚ö†Ô∏è **–ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:**

‚Ä¢ –°–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω.
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–≥–æ). –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ.
‚Ä¢ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.
‚Ä¢ –õ—é–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫–æ–ª–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Å–∞—é—â–∏–π—Å—è —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞ —É—á–∞—Å—Ç–Ω–∏–∫ –µ–≥–æ –∑–∞–ø–æ—Å—Ç–∏–≤—à–∏–π –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.

üì° [–ù–∞—à —á–∞—Ç](https://t.me/+qAcLEuOQVbZhYWFi) | [Discord](https://discord.gg/rBnww7ytM3) | [TikTok](https://www.tiktok.com/@spectr_mindustry?_t=ZN-8yZCVx33mr9&_r=1)`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
function parseMessageLink(link) {
  try {
    const url = new URL(link);
    const pathParts = url.pathname.split('/').filter(part => part);
    
    if (pathParts[0] === 'c' && pathParts.length >= 3) {
      const chatId = pathParts[1];
      const messageId = parseInt(pathParts[2]);
      
      return {
        chatId: parseInt('-100' + chatId),
        messageId: messageId
      };
    }
    return null;
  } catch (error) {
    console.error('Error parsing message link:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function safeSendMessage(chatId, text, options = {}, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const result = await bot.sendMessage(chatId, text, options);
      return result;
    } catch (error) {
      console.error(`Attempt ${i + 1} failed:`, error.message);
      
      if (i === retries - 1) {
        throw error;
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getWelcomeMessage(userId, firstName) {
  if (userId === KNOWN_USERS.SPECTR) {
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–ø–µ–∫—Ç—Ä! üëã\n\n–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ @spektrminda.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–¢–∞–∫–∂–µ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç.`;
  } else if (userId === KNOWN_USERS.ADVISOR) {
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫! üëã\n\n–Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ @spektrminda.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–¢–∞–∫–∂–µ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç.`;
  } else {
    return `üëã –ü—Ä–∏–≤–µ—Ç${firstName ? ', ' + firstName : ''}! –Ø ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ @spektrminda.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –º–µ–Ω—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏! üòä`;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
module.exports = async (req, res) => {
  try {
    res.status(200).send('OK');
    
    const update = req.body;
    
    if (!update) {
      console.log('No update received');
      return;
    }
    
    console.log('Received update type:', update.message ? 'message' : update.channel_post ? 'channel_post' : 'unknown');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message && update.message.chat.type === 'private') {
      const chatId = update.message.chat.id;
      const messageText = update.message.text;
      const userId = update.message.from.id;
      const firstName = update.message.from.first_name;

      console.log('Processing private message from user:', userId, 'name:', firstName);
      
      if (messageText === '/test') {
        console.log('Received /test command');
        try {
          await safeSendMessage(chatId, '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', {
            disable_web_page_preview: true
          });
          console.log('Responded to /test command');
        } catch (error) {
          console.error('Error sending response to /test:', error.message);
        }
        return;
      }
      
      if (messageText === '/start') {
        console.log('Received /start command');
        try {
          const welcomeMessage = getWelcomeMessage(userId, firstName);
          await safeSendMessage(
            chatId,
            welcomeMessage,
            { disable_web_page_preview: true }
          );
          console.log('Responded to /start command with personalized message');
        } catch (error) {
          console.error('Error sending response to /start:', error.message);
        }
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      if (userId === KNOWN_USERS.SPECTR || userId === KNOWN_USERS.ADVISOR) {
        const lines = messageText.split('\n');
        if (lines.length >= 2) {
          const link = lines[0].trim();
          const replyText = lines.slice(1).join('\n').trim();
          
          if (link.startsWith('https://t.me/c/')) {
            const messageInfo = parseMessageLink(link);
            
            if (messageInfo && replyText) {
              try {
                console.log('Attempting to reply to message:', messageInfo);
                
                await safeSendMessage(messageInfo.chatId, replyText, {
                  reply_to_message_id: messageInfo.messageId,
                  disable_web_page_preview: true
                });
                
                await safeSendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', {
                  disable_web_page_preview: true
                });
                
              } catch (error) {
                console.error('Error sending reply:', error);
                await safeSendMessage(
                  chatId, 
                  '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n' +
                  '1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n' +
                  '2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
                  '3. –°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n' +
                  `–û—à–∏–±–∫–∞: ${error.message}`,
                  { disable_web_page_preview: true }
                );
              }
              return;
            }
          }
        }
      }
      
      console.log('Received unknown command in private chat:', messageText);
      
      if (userId === KNOWN_USERS.SPECTR || userId === KNOWN_USERS.ADVISOR) {
        try {
          await safeSendMessage(
            chatId,
            '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, ' +
            '–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.\n\n' +
            '–ü—Ä–∏–º–µ—Ä:\n' +
            'https://t.me/c/123456789/123\n' +
            '–í–∞—à –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å',
            { disable_web_page_preview: true }
          );
        } catch (error) {
          console.error('Error sending help message:', error.message);
        }
      }
      
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ - –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ë–û–¢–ê
    if (update.channel_post) {
      const chatId = update.channel_post.chat.id;
      const messageId = update.channel_post.message_id;
      const channelUsername = update.channel_post.chat.username;

      console.log('Channel post detected in:', channelUsername);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª
      if (channelUsername === 'spektrminda') {
        console.log('Post in target channel, attempting to comment...');
        
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç
          await safeSendMessage(chatId, rulesText, {
            parse_mode: 'Markdown',
            reply_to_message_id: messageId,
            disable_web_page_preview: true
          });
          console.log('Comment successfully added under the post');
        } catch (error) {
          console.error('Error sending comment:', error.message);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply
          if (error.message.includes('reply') || error.message.includes('rights')) {
            try {
              await safeSendMessage(chatId, rulesText, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
              });
              console.log('Comment sent without reply');
            } catch (secondError) {
              console.error('Error on second attempt:', secondError.message);
            }
          }
        }
      } else {
        console.log('Post from another channel:', channelUsername, '. Ignoring.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
    if (update.message && DISCUSSION_GROUP_ID) {
      const message = update.message;
      const chatId = message.chat.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã
      if (chatId.toString() === DISCUSSION_GROUP_ID.toString()) {
        console.log('Message received in discussion group:', message.text || 'No text content');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('Full message structure:', JSON.stringify({
          has_forward_from_chat: !!message.forward_from_chat,
          forward_from_chat: message.forward_from_chat,
          chat: message.chat,
          text: message.text
        }, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –∏–∑ –∫–∞–Ω–∞–ª–∞
        if (message.forward_from_chat) {
          console.log('Message is forwarded from chat:', message.forward_from_chat.username || message.forward_from_chat.id);
          
          if (message.forward_from_chat.username === 'spektrminda') {
            console.log('New post from channel detected in discussion group');
            
            try {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              await safeSendMessage(DISCUSSION_GROUP_ID, rulesText, {
                parse_mode: 'Markdown',
                reply_to_message_id: message.message_id,
                disable_web_page_preview: true
              });
              console.log('Comment successfully added to the discussion');
            } catch (error) {
              console.error('Error sending comment to discussion:', error.message);
            }
          } else {
            console.log('Message is forwarded from different channel:', message.forward_from_chat.username);
          }
        } else {
          console.log('Message is not forwarded from any channel');
        }
      } else {
        console.log('Message is not from discussion group');
      }
    } else if (!DISCUSSION_GROUP_ID) {
      console.log('DISCUSSION_GROUP_ID environment variable is not set');
    }
  } catch (error) {
    console.error('General error in handler:', error);
  }
};
